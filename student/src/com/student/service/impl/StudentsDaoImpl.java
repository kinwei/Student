package com.student.service.impl;import java.util.List;import org.hibernate.Query;import org.hibernate.Session;import org.hibernate.Transaction;import com.student.entity.Students;import com.student.service.StudentsDao;import com.student.util.MyHibernateSessionFactory;public class StudentsDaoImpl implements StudentsDao {	@Override	public List<Students> queryAllStudents() {		// TODO Auto-generated method stub		Transaction tx = null;		List<Students> list = null;		String hql = "";		try {			Session session = MyHibernateSessionFactory.getSessionFactory().getCurrentSession();			tx = session.beginTransaction();			 hql = "From Students";			 Query query = session.createQuery(hql);			 list = query.list();			 tx.commit();			 return list;		} catch (Exception e) {			e.printStackTrace();			tx.commit();			return list;		}finally{			if(tx != null){				tx = null;			}		}	}	@Override	public Students queryBySid(String sid) {		// TODO Auto-generated method stub		return null;	}	@Override	public boolean addStudents(Students student) {		// TODO Auto-generated method stub		return false;	}	@Override	public boolean updateStudents(Students student) {		// TODO Auto-generated method stub		return false;	}	@Override	public boolean deleteStudents(String sid) {		Transaction tx = null;		try {			Session session = MyHibernateSessionFactory.getSessionFactory().getCurrentSession();			tx = session.beginTransaction();			Students student = (Students) session.get(Students.class, sid);			session.delete(student);			 tx.commit();			 return true;		} catch (Exception e) {			e.printStackTrace();			tx.commit();			return false;		}finally{			if(tx != null){				tx = null;			}		}	}		private String getNewSid(){		Transaction tx = null;		String hql = "";		String sid = null;				try {			Session session = MyHibernateSessionFactory.getSessionFactory().getCurrentSession();			tx = session.beginTransaction();			hql = "select max(sid) From Students";			sid = (String)session.createQuery(hql).uniqueResult();			if(sid == null || "".equals(sid)){				return "s0000001";			}else{				String temp = sid.substring(1);				int i = Integer.parseInt(temp);				i++;				temp = String.valueOf(i);				for(int j = 0;j < 7 - temp.length();j++){					temp = "0" + temp; 				}				sid = "S" + temp;				return sid;			}								} catch (Exception e) {			e.printStackTrace();			return null;		}finally{			if(tx != null){				tx = null;			}		}	}}